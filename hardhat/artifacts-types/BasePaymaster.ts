/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ForwardRequestStruct = {
  from: string;
  to: string;
  value: BigNumberish;
  gas: BigNumberish;
  nonce: BigNumberish;
  data: BytesLike;
  validUntil: BigNumberish;
};

export type ForwardRequestStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber
] & {
  from: string;
  to: string;
  value: BigNumber;
  gas: BigNumber;
  nonce: BigNumber;
  data: string;
  validUntil: BigNumber;
};

export type RelayDataStruct = {
  gasPrice: BigNumberish;
  pctRelayFee: BigNumberish;
  baseRelayFee: BigNumberish;
  relayWorker: string;
  paymaster: string;
  forwarder: string;
  paymasterData: BytesLike;
  clientId: BigNumberish;
};

export type RelayDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  BigNumber
] & {
  gasPrice: BigNumber;
  pctRelayFee: BigNumber;
  baseRelayFee: BigNumber;
  relayWorker: string;
  paymaster: string;
  forwarder: string;
  paymasterData: string;
  clientId: BigNumber;
};

export type RelayRequestStruct = {
  request: ForwardRequestStruct;
  relayData: RelayDataStruct;
};

export type RelayRequestStructOutput = [
  ForwardRequestStructOutput,
  RelayDataStructOutput
] & { request: ForwardRequestStructOutput; relayData: RelayDataStructOutput };

export type GasAndDataLimitsStruct = {
  acceptanceBudget: BigNumberish;
  preRelayedCallGasLimit: BigNumberish;
  postRelayedCallGasLimit: BigNumberish;
  calldataSizeLimit: BigNumberish;
};

export type GasAndDataLimitsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  acceptanceBudget: BigNumber;
  preRelayedCallGasLimit: BigNumber;
  postRelayedCallGasLimit: BigNumber;
  calldataSizeLimit: BigNumber;
};

export interface BasePaymasterInterface extends utils.Interface {
  functions: {
    "CALLDATA_SIZE_LIMIT()": FunctionFragment;
    "FORWARDER_HUB_OVERHEAD()": FunctionFragment;
    "PAYMASTER_ACCEPTANCE_BUDGET()": FunctionFragment;
    "POST_RELAYED_CALL_GAS_LIMIT()": FunctionFragment;
    "PRE_RELAYED_CALL_GAS_LIMIT()": FunctionFragment;
    "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))": FunctionFragment;
    "getGasAndDataLimits()": FunctionFragment;
    "getHubAddr()": FunctionFragment;
    "getRelayHubDeposit()": FunctionFragment;
    "owner()": FunctionFragment;
    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": FunctionFragment;
    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRelayHub(address)": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "versionPaymaster()": FunctionFragment;
    "withdrawRelayHubDepositTo(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CALLDATA_SIZE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FORWARDER_HUB_OVERHEAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMASTER_ACCEPTANCE_BUDGET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POST_RELAYED_CALL_GAS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRE_RELAYED_CALL_GAS_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyForwarder",
    values: [RelayRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasAndDataLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayHubDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [BytesLike, boolean, BigNumberish, RelayDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [RelayRequestStruct, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setRelayHub", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionPaymaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRelayHubDepositTo",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CALLDATA_SIZE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FORWARDER_HUB_OVERHEAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMASTER_ACCEPTANCE_BUDGET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POST_RELAYED_CALL_GAS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRE_RELAYED_CALL_GAS_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_verifyForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasAndDataLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRelayHubDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionPaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRelayHubDepositTo",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BasePaymaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BasePaymasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "CALLDATA_SIZE_LIMIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FORWARDER_HUB_OVERHEAD()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAYMASTER_ACCEPTANCE_BUDGET(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "PAYMASTER_ACCEPTANCE_BUDGET()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    POST_RELAYED_CALL_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "POST_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PRE_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _verifyForwarder(
      relayRequest: RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))"(
      relayRequest: RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getGasAndDataLimits(
      overrides?: CallOverrides
    ): Promise<
      [GasAndDataLimitsStructOutput] & { limits: GasAndDataLimitsStructOutput }
    >;

    "getGasAndDataLimits()"(
      overrides?: CallOverrides
    ): Promise<
      [GasAndDataLimitsStructOutput] & { limits: GasAndDataLimitsStructOutput }
    >;

    getHubAddr(overrides?: CallOverrides): Promise<[string]>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<[string]>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preRelayedCall(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRelayHub(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRelayHub(address)"(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTrustedForwarder(address)"(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<[string]>;

    versionPaymaster(overrides?: CallOverrides): Promise<[string]>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<[string]>;

    withdrawRelayHubDepositTo(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawRelayHubDepositTo(uint256,address)"(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  "CALLDATA_SIZE_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

  "FORWARDER_HUB_OVERHEAD()"(overrides?: CallOverrides): Promise<BigNumber>;

  PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;

  "PAYMASTER_ACCEPTANCE_BUDGET()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  "POST_RELAYED_CALL_GAS_LIMIT()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  "PRE_RELAYED_CALL_GAS_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  _verifyForwarder(
    relayRequest: RelayRequestStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))"(
    relayRequest: RelayRequestStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  getGasAndDataLimits(
    overrides?: CallOverrides
  ): Promise<GasAndDataLimitsStructOutput>;

  "getGasAndDataLimits()"(
    overrides?: CallOverrides
  ): Promise<GasAndDataLimitsStructOutput>;

  getHubAddr(overrides?: CallOverrides): Promise<string>;

  "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

  getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  postRelayedCall(
    context: BytesLike,
    success: boolean,
    gasUseWithoutPost: BigNumberish,
    relayData: RelayDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
    context: BytesLike,
    success: boolean,
    gasUseWithoutPost: BigNumberish,
    relayData: RelayDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preRelayedCall(
    relayRequest: RelayRequestStruct,
    signature: BytesLike,
    approvalData: BytesLike,
    maxPossibleGas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
    relayRequest: RelayRequestStruct,
    signature: BytesLike,
    approvalData: BytesLike,
    maxPossibleGas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRelayHub(
    hub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRelayHub(address)"(
    hub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTrustedForwarder(address)"(
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

  versionPaymaster(overrides?: CallOverrides): Promise<string>;

  "versionPaymaster()"(overrides?: CallOverrides): Promise<string>;

  withdrawRelayHubDepositTo(
    amount: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawRelayHubDepositTo(uint256,address)"(
    amount: BigNumberish,
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "CALLDATA_SIZE_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    "FORWARDER_HUB_OVERHEAD()"(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;

    "PAYMASTER_ACCEPTANCE_BUDGET()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "POST_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "PRE_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyForwarder(
      relayRequest: RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))"(
      relayRequest: RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getGasAndDataLimits(
      overrides?: CallOverrides
    ): Promise<GasAndDataLimitsStructOutput>;

    "getGasAndDataLimits()"(
      overrides?: CallOverrides
    ): Promise<GasAndDataLimitsStructOutput>;

    getHubAddr(overrides?: CallOverrides): Promise<string>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    preRelayedCall(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { context: string; rejectOnRecipientRevert: boolean }
    >;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { context: string; rejectOnRecipientRevert: boolean }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setRelayHub(hub: string, overrides?: CallOverrides): Promise<void>;

    "setRelayHub(address)"(
      hub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

    versionPaymaster(overrides?: CallOverrides): Promise<string>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<string>;

    withdrawRelayHubDepositTo(
      amount: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawRelayHubDepositTo(uint256,address)"(
      amount: BigNumberish,
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    CALLDATA_SIZE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "CALLDATA_SIZE_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    FORWARDER_HUB_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    "FORWARDER_HUB_OVERHEAD()"(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMASTER_ACCEPTANCE_BUDGET(overrides?: CallOverrides): Promise<BigNumber>;

    "PAYMASTER_ACCEPTANCE_BUDGET()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    POST_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "POST_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PRE_RELAYED_CALL_GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "PRE_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyForwarder(
      relayRequest: RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))"(
      relayRequest: RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasAndDataLimits(overrides?: CallOverrides): Promise<BigNumber>;

    "getGasAndDataLimits()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHubAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preRelayedCall(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRelayHub(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRelayHub(address)"(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTrustedForwarder(address)"(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    versionPaymaster(overrides?: CallOverrides): Promise<BigNumber>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRelayHubDepositTo(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawRelayHubDepositTo(uint256,address)"(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CALLDATA_SIZE_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CALLDATA_SIZE_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FORWARDER_HUB_OVERHEAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FORWARDER_HUB_OVERHEAD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMASTER_ACCEPTANCE_BUDGET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PAYMASTER_ACCEPTANCE_BUDGET()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POST_RELAYED_CALL_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "POST_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRE_RELAYED_CALL_GAS_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PRE_RELAYED_CALL_GAS_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifyForwarder(
      relayRequest: RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_verifyForwarder(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)))"(
      relayRequest: RelayRequestStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasAndDataLimits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGasAndDataLimits()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHubAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRelayHubDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRelayHubDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preRelayedCall(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRelayHub(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRelayHub(address)"(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTrustedForwarder(address)"(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustedForwarder()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionPaymaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionPaymaster()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawRelayHubDepositTo(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawRelayHubDepositTo(uint256,address)"(
      amount: BigNumberish,
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
