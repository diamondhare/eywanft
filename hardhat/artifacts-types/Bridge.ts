/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BridgeInterface extends utils.Interface {
  functions: {
    "_listNode()": FunctionFragment;
    "addContractBind(bytes32,bytes32,bytes32)": FunctionFragment;
    "castToAddress(bytes32)": FunctionFragment;
    "castToBytes32(address)": FunctionFragment;
    "dao()": FunctionFragment;
    "daoTransferOwnership(address)": FunctionFragment;
    "daoUpdateEpochRequest(bool)": FunctionFragment;
    "epochNum()": FunctionFragment;
    "epochParticipantsNum()": FunctionFragment;
    "getEpoch()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)": FunctionFragment;
    "receiveRequestV2(bytes,bytes,bytes,bytes,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "statFilterLen()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)": FunctionFragment;
    "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "updateEpoch(bytes,bytes,bytes,uint256,uint8,uint32)": FunctionFragment;
    "versionRecipient()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_listNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addContractBind",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castToAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoTransferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "daoUpdateEpochRequest",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "epochNum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochParticipantsNum",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getEpoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareRqId",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveRequestV2",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "statFilterLen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transmitRequestV2",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transmitRequestV2ToSolana",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpoch",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_listNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addContractBind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoUpdateEpochRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochNum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochParticipantsNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareRqId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveRequestV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "statFilterLen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transmitRequestV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transmitRequestV2ToSolana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;

  events: {
    "NewEpoch(bytes,bytes,bool,uint32)": EventFragment;
    "OracleRequest(string,address,bytes32,bytes,address,address,uint256)": EventFragment;
    "OracleRequestSolana(string,bytes32,bytes32,bytes,bytes32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReceiveRequest(bytes32,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewEpoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequestSolana"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveRequest"): EventFragment;
}

export type NewEpochEvent = TypedEvent<
  [string, string, boolean, number],
  {
    oldEpochKey: string;
    newEpochKey: string;
    requested: boolean;
    epochNum: number;
  }
>;

export type NewEpochEventFilter = TypedEventFilter<NewEpochEvent>;

export type OracleRequestEvent = TypedEvent<
  [string, string, string, string, string, string, BigNumber],
  {
    requestType: string;
    bridge: string;
    requestId: string;
    selector: string;
    receiveSide: string;
    oppositeBridge: string;
    chainid: BigNumber;
  }
>;

export type OracleRequestEventFilter = TypedEventFilter<OracleRequestEvent>;

export type OracleRequestSolanaEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  {
    requestType: string;
    bridge: string;
    requestId: string;
    selector: string;
    oppositeBridge: string;
    chainid: BigNumber;
  }
>;

export type OracleRequestSolanaEventFilter =
  TypedEventFilter<OracleRequestSolanaEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ReceiveRequestEvent = TypedEvent<
  [string, string, string],
  { reqId: string; receiveSide: string; bridgeFrom: string }
>;

export type ReceiveRequestEventFilter = TypedEventFilter<ReceiveRequestEvent>;

export interface Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _listNode(overrides?: CallOverrides): Promise<[string]>;

    "_listNode()"(overrides?: CallOverrides): Promise<[string]>;

    addContractBind(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addContractBind(bytes32,bytes32,bytes32)"(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castToAddress(x: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "castToAddress(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    castToBytes32(a: string, overrides?: CallOverrides): Promise<[string]>;

    "castToBytes32(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    "dao()"(overrides?: CallOverrides): Promise<[string]>;

    daoTransferOwnership(
      newDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "daoTransferOwnership(address)"(
      newDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoUpdateEpochRequest(
      resetEpoch: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "daoUpdateEpochRequest(bool)"(
      resetEpoch: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochNum(overrides?: CallOverrides): Promise<[number]>;

    "epochNum()"(overrides?: CallOverrides): Promise<[number]>;

    epochParticipantsNum(overrides?: CallOverrides): Promise<[number]>;

    "epochParticipantsNum()"(overrides?: CallOverrides): Promise<[number]>;

    getEpoch(overrides?: CallOverrides): Promise<[string, number, number]>;

    "getEpoch()"(overrides?: CallOverrides): Promise<[string, number, number]>;

    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    receiveRequestV2(
      _blockHeader: BytesLike,
      _txMerkleProve: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "receiveRequestV2(bytes,bytes,bytes,bytes,uint256)"(
      _blockHeader: BytesLike,
      _txMerkleProve: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      _forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTrustedForwarder(address)"(
      _forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    statFilterLen(overrides?: CallOverrides): Promise<[BigNumber]>;

    "statFilterLen()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transmitRequestV2(
      _selector: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)"(
      _selector: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transmitRequestV2ToSolana(
      _selector: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)"(
      _selector: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<[string]>;

    updateEpoch(
      _newKey: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      _newEpochParticipantsNum: BigNumberish,
      _newEpochNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateEpoch(bytes,bytes,bytes,uint256,uint8,uint32)"(
      _newKey: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      _newEpochParticipantsNum: BigNumberish,
      _newEpochNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<[string]>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<[string]>;
  };

  _listNode(overrides?: CallOverrides): Promise<string>;

  "_listNode()"(overrides?: CallOverrides): Promise<string>;

  addContractBind(
    from: BytesLike,
    oppositeBridge: BytesLike,
    to: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addContractBind(bytes32,bytes32,bytes32)"(
    from: BytesLike,
    oppositeBridge: BytesLike,
    to: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castToAddress(x: BytesLike, overrides?: CallOverrides): Promise<string>;

  "castToAddress(bytes32)"(
    x: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  castToBytes32(a: string, overrides?: CallOverrides): Promise<string>;

  "castToBytes32(address)"(
    a: string,
    overrides?: CallOverrides
  ): Promise<string>;

  dao(overrides?: CallOverrides): Promise<string>;

  "dao()"(overrides?: CallOverrides): Promise<string>;

  daoTransferOwnership(
    newDao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "daoTransferOwnership(address)"(
    newDao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoUpdateEpochRequest(
    resetEpoch: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "daoUpdateEpochRequest(bool)"(
    resetEpoch: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochNum(overrides?: CallOverrides): Promise<number>;

  "epochNum()"(overrides?: CallOverrides): Promise<number>;

  epochParticipantsNum(overrides?: CallOverrides): Promise<number>;

  "epochParticipantsNum()"(overrides?: CallOverrides): Promise<number>;

  getEpoch(overrides?: CallOverrides): Promise<[string, number, number]>;

  "getEpoch()"(overrides?: CallOverrides): Promise<[string, number, number]>;

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(address)"(
    from: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTrustedForwarder(address)"(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  prepareRqId(
    oppositeBridge: BytesLike,
    chainId: BigNumberish,
    receiveSide: BytesLike,
    from: BytesLike,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
    oppositeBridge: BytesLike,
    chainId: BigNumberish,
    receiveSide: BytesLike,
    from: BytesLike,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  receiveRequestV2(
    _blockHeader: BytesLike,
    _txMerkleProve: BytesLike,
    _votersPubKey: BytesLike,
    _votersSignature: BytesLike,
    _votersMask: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "receiveRequestV2(bytes,bytes,bytes,bytes,uint256)"(
    _blockHeader: BytesLike,
    _txMerkleProve: BytesLike,
    _votersPubKey: BytesLike,
    _votersSignature: BytesLike,
    _votersMask: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    _forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTrustedForwarder(address)"(
    _forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  statFilterLen(overrides?: CallOverrides): Promise<BigNumber>;

  "statFilterLen()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transmitRequestV2(
    _selector: BytesLike,
    receiveSide: string,
    oppositeBridge: string,
    chainId: BigNumberish,
    requestId: BytesLike,
    sender: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)"(
    _selector: BytesLike,
    receiveSide: string,
    oppositeBridge: string,
    chainId: BigNumberish,
    requestId: BytesLike,
    sender: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transmitRequestV2ToSolana(
    _selector: BytesLike,
    receiveSide: BytesLike,
    oppositeBridge: BytesLike,
    chainId: BigNumberish,
    requestId: BytesLike,
    sender: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)"(
    _selector: BytesLike,
    receiveSide: BytesLike,
    oppositeBridge: BytesLike,
    chainId: BigNumberish,
    requestId: BytesLike,
    sender: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

  updateEpoch(
    _newKey: BytesLike,
    _votersPubKey: BytesLike,
    _votersSignature: BytesLike,
    _votersMask: BigNumberish,
    _newEpochParticipantsNum: BigNumberish,
    _newEpochNum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateEpoch(bytes,bytes,bytes,uint256,uint8,uint32)"(
    _newKey: BytesLike,
    _votersPubKey: BytesLike,
    _votersSignature: BytesLike,
    _votersMask: BigNumberish,
    _newEpochParticipantsNum: BigNumberish,
    _newEpochNum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  versionRecipient(overrides?: CallOverrides): Promise<string>;

  "versionRecipient()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _listNode(overrides?: CallOverrides): Promise<string>;

    "_listNode()"(overrides?: CallOverrides): Promise<string>;

    addContractBind(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addContractBind(bytes32,bytes32,bytes32)"(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    castToAddress(x: BytesLike, overrides?: CallOverrides): Promise<string>;

    "castToAddress(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    castToBytes32(a: string, overrides?: CallOverrides): Promise<string>;

    "castToBytes32(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<string>;

    dao(overrides?: CallOverrides): Promise<string>;

    "dao()"(overrides?: CallOverrides): Promise<string>;

    daoTransferOwnership(
      newDao: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "daoTransferOwnership(address)"(
      newDao: string,
      overrides?: CallOverrides
    ): Promise<void>;

    daoUpdateEpochRequest(
      resetEpoch: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "daoUpdateEpochRequest(bool)"(
      resetEpoch: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    epochNum(overrides?: CallOverrides): Promise<number>;

    "epochNum()"(overrides?: CallOverrides): Promise<number>;

    epochParticipantsNum(overrides?: CallOverrides): Promise<number>;

    "epochParticipantsNum()"(overrides?: CallOverrides): Promise<number>;

    getEpoch(overrides?: CallOverrides): Promise<[string, number, number]>;

    "getEpoch()"(overrides?: CallOverrides): Promise<[string, number, number]>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(forwarder: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    receiveRequestV2(
      _blockHeader: BytesLike,
      _txMerkleProve: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "receiveRequestV2(bytes,bytes,bytes,bytes,uint256)"(
      _blockHeader: BytesLike,
      _txMerkleProve: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setTrustedForwarder(
      _forwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTrustedForwarder(address)"(
      _forwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    statFilterLen(overrides?: CallOverrides): Promise<BigNumber>;

    "statFilterLen()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transmitRequestV2(
      _selector: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)"(
      _selector: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transmitRequestV2ToSolana(
      _selector: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)"(
      _selector: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

    updateEpoch(
      _newKey: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      _newEpochParticipantsNum: BigNumberish,
      _newEpochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateEpoch(bytes,bytes,bytes,uint256,uint8,uint32)"(
      _newKey: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      _newEpochParticipantsNum: BigNumberish,
      _newEpochNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    versionRecipient(overrides?: CallOverrides): Promise<string>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewEpoch(bytes,bytes,bool,uint32)"(
      oldEpochKey?: null,
      newEpochKey?: null,
      requested?: null,
      epochNum?: null
    ): NewEpochEventFilter;
    NewEpoch(
      oldEpochKey?: null,
      newEpochKey?: null,
      requested?: null,
      epochNum?: null
    ): NewEpochEventFilter;

    "OracleRequest(string,address,bytes32,bytes,address,address,uint256)"(
      requestType?: null,
      bridge?: null,
      requestId?: null,
      selector?: null,
      receiveSide?: null,
      oppositeBridge?: null,
      chainid?: null
    ): OracleRequestEventFilter;
    OracleRequest(
      requestType?: null,
      bridge?: null,
      requestId?: null,
      selector?: null,
      receiveSide?: null,
      oppositeBridge?: null,
      chainid?: null
    ): OracleRequestEventFilter;

    "OracleRequestSolana(string,bytes32,bytes32,bytes,bytes32,uint256)"(
      requestType?: null,
      bridge?: null,
      requestId?: null,
      selector?: null,
      oppositeBridge?: null,
      chainid?: null
    ): OracleRequestSolanaEventFilter;
    OracleRequestSolana(
      requestType?: null,
      bridge?: null,
      requestId?: null,
      selector?: null,
      oppositeBridge?: null,
      chainid?: null
    ): OracleRequestSolanaEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ReceiveRequest(bytes32,address,bytes32)"(
      reqId?: null,
      receiveSide?: null,
      bridgeFrom?: null
    ): ReceiveRequestEventFilter;
    ReceiveRequest(
      reqId?: null,
      receiveSide?: null,
      bridgeFrom?: null
    ): ReceiveRequestEventFilter;
  };

  estimateGas: {
    _listNode(overrides?: CallOverrides): Promise<BigNumber>;

    "_listNode()"(overrides?: CallOverrides): Promise<BigNumber>;

    addContractBind(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addContractBind(bytes32,bytes32,bytes32)"(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castToAddress(x: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "castToAddress(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castToBytes32(a: string, overrides?: CallOverrides): Promise<BigNumber>;

    "castToBytes32(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    "dao()"(overrides?: CallOverrides): Promise<BigNumber>;

    daoTransferOwnership(
      newDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "daoTransferOwnership(address)"(
      newDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoUpdateEpochRequest(
      resetEpoch: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "daoUpdateEpochRequest(bool)"(
      resetEpoch: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochNum(overrides?: CallOverrides): Promise<BigNumber>;

    "epochNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochParticipantsNum(overrides?: CallOverrides): Promise<BigNumber>;

    "epochParticipantsNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "getEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveRequestV2(
      _blockHeader: BytesLike,
      _txMerkleProve: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "receiveRequestV2(bytes,bytes,bytes,bytes,uint256)"(
      _blockHeader: BytesLike,
      _txMerkleProve: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      _forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTrustedForwarder(address)"(
      _forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    statFilterLen(overrides?: CallOverrides): Promise<BigNumber>;

    "statFilterLen()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transmitRequestV2(
      _selector: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)"(
      _selector: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transmitRequestV2ToSolana(
      _selector: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)"(
      _selector: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateEpoch(
      _newKey: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      _newEpochParticipantsNum: BigNumberish,
      _newEpochNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateEpoch(bytes,bytes,bytes,uint256,uint8,uint32)"(
      _newKey: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      _newEpochParticipantsNum: BigNumberish,
      _newEpochNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _listNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_listNode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addContractBind(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addContractBind(bytes32,bytes32,bytes32)"(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castToAddress(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "castToAddress(bytes32)"(
      x: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castToBytes32(
      a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "castToBytes32(address)"(
      a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dao()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoTransferOwnership(
      newDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "daoTransferOwnership(address)"(
      newDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoUpdateEpochRequest(
      resetEpoch: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "daoUpdateEpochRequest(bool)"(
      resetEpoch: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochNum()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochParticipantsNum(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochParticipantsNum()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEpoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveRequestV2(
      _blockHeader: BytesLike,
      _txMerkleProve: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "receiveRequestV2(bytes,bytes,bytes,bytes,uint256)"(
      _blockHeader: BytesLike,
      _txMerkleProve: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      _forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTrustedForwarder(address)"(
      _forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    statFilterLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "statFilterLen()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transmitRequestV2(
      _selector: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)"(
      _selector: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transmitRequestV2ToSolana(
      _selector: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)"(
      _selector: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustedForwarder()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateEpoch(
      _newKey: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      _newEpochParticipantsNum: BigNumberish,
      _newEpochNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateEpoch(bytes,bytes,bytes,uint256,uint8,uint32)"(
      _newKey: BytesLike,
      _votersPubKey: BytesLike,
      _votersSignature: BytesLike,
      _votersMask: BigNumberish,
      _newEpochParticipantsNum: BigNumberish,
      _newEpochNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionRecipient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
