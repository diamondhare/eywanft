/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TestTargetInterface extends utils.Interface {
  functions: {
    "bytesData()": FunctionFragment;
    "setTestAddress(address)": FunctionFragment;
    "setTestBytes(bytes)": FunctionFragment;
    "setTestString(string)": FunctionFragment;
    "setTestUint(uint256)": FunctionFragment;
    "stringData()": FunctionFragment;
    "tesAddress()": FunctionFragment;
    "testUint()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bytesData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTestAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTestBytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTestString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTestUint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stringData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tesAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "testUint", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bytesData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTestAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTestBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTestString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTestUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stringData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tesAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testUint", data: BytesLike): Result;

  events: {};
}

export interface TestTarget extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestTargetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bytesData(overrides?: CallOverrides): Promise<[string]>;

    "bytesData()"(overrides?: CallOverrides): Promise<[string]>;

    setTestAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTestAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTestBytes(
      _inputBytes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTestBytes(bytes)"(
      _inputBytes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTestString(
      _inputString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTestString(string)"(
      _inputString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTestUint(
      _testUint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTestUint(uint256)"(
      _testUint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stringData(overrides?: CallOverrides): Promise<[string]>;

    "stringData()"(overrides?: CallOverrides): Promise<[string]>;

    tesAddress(overrides?: CallOverrides): Promise<[string]>;

    "tesAddress()"(overrides?: CallOverrides): Promise<[string]>;

    testUint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "testUint()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  bytesData(overrides?: CallOverrides): Promise<string>;

  "bytesData()"(overrides?: CallOverrides): Promise<string>;

  setTestAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTestAddress(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTestBytes(
    _inputBytes: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTestBytes(bytes)"(
    _inputBytes: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTestString(
    _inputString: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTestString(string)"(
    _inputString: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTestUint(
    _testUint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTestUint(uint256)"(
    _testUint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stringData(overrides?: CallOverrides): Promise<string>;

  "stringData()"(overrides?: CallOverrides): Promise<string>;

  tesAddress(overrides?: CallOverrides): Promise<string>;

  "tesAddress()"(overrides?: CallOverrides): Promise<string>;

  testUint(overrides?: CallOverrides): Promise<BigNumber>;

  "testUint()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bytesData(overrides?: CallOverrides): Promise<string>;

    "bytesData()"(overrides?: CallOverrides): Promise<string>;

    setTestAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "setTestAddress(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setTestBytes(
      _inputBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTestBytes(bytes)"(
      _inputBytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setTestString(
      _inputString: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTestString(string)"(
      _inputString: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTestUint(
      _testUint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setTestUint(uint256)"(
      _testUint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringData(overrides?: CallOverrides): Promise<string>;

    "stringData()"(overrides?: CallOverrides): Promise<string>;

    tesAddress(overrides?: CallOverrides): Promise<string>;

    "tesAddress()"(overrides?: CallOverrides): Promise<string>;

    testUint(overrides?: CallOverrides): Promise<BigNumber>;

    "testUint()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    bytesData(overrides?: CallOverrides): Promise<BigNumber>;

    "bytesData()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTestAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTestAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTestBytes(
      _inputBytes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTestBytes(bytes)"(
      _inputBytes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTestString(
      _inputString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTestString(string)"(
      _inputString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTestUint(
      _testUint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTestUint(uint256)"(
      _testUint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stringData(overrides?: CallOverrides): Promise<BigNumber>;

    "stringData()"(overrides?: CallOverrides): Promise<BigNumber>;

    tesAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "tesAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    testUint(overrides?: CallOverrides): Promise<BigNumber>;

    "testUint()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bytesData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bytesData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTestAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTestAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTestBytes(
      _inputBytes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTestBytes(bytes)"(
      _inputBytes: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTestString(
      _inputString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTestString(string)"(
      _inputString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTestUint(
      _testUint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTestUint(uint256)"(
      _testUint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stringData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stringData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tesAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tesAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testUint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "testUint()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
