/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BlockTestInterface extends utils.Interface {
  functions: {
    "blockHash(uint64,bytes32,bytes32,bytes32,uint64,uint64)": FunctionFragment;
    "blockHeaderRawDataTest(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blockHash",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blockHeaderRawDataTest",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "blockHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockHeaderRawDataTest",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BlockTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlockTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockHash(
      chainId: BigNumberish,
      prevBlockHash: BytesLike,
      epochBlockHash: BytesLike,
      transactionsRoot: BytesLike,
      sourceHeigh: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "blockHash(uint64,bytes32,bytes32,bytes32,uint64,uint64)"(
      chainId: BigNumberish,
      prevBlockHash: BytesLike,
      epochBlockHash: BytesLike,
      transactionsRoot: BytesLike,
      sourceHeigh: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    blockHeaderRawDataTest(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { allBlockHash: string; blockTxHash: string }
    >;

    "blockHeaderRawDataTest(bytes)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { allBlockHash: string; blockTxHash: string }
    >;
  };

  blockHash(
    chainId: BigNumberish,
    prevBlockHash: BytesLike,
    epochBlockHash: BytesLike,
    transactionsRoot: BytesLike,
    sourceHeigh: BigNumberish,
    height: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "blockHash(uint64,bytes32,bytes32,bytes32,uint64,uint64)"(
    chainId: BigNumberish,
    prevBlockHash: BytesLike,
    epochBlockHash: BytesLike,
    transactionsRoot: BytesLike,
    sourceHeigh: BigNumberish,
    height: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  blockHeaderRawDataTest(
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { allBlockHash: string; blockTxHash: string }>;

  "blockHeaderRawDataTest(bytes)"(
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { allBlockHash: string; blockTxHash: string }>;

  callStatic: {
    blockHash(
      chainId: BigNumberish,
      prevBlockHash: BytesLike,
      epochBlockHash: BytesLike,
      transactionsRoot: BytesLike,
      sourceHeigh: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "blockHash(uint64,bytes32,bytes32,bytes32,uint64,uint64)"(
      chainId: BigNumberish,
      prevBlockHash: BytesLike,
      epochBlockHash: BytesLike,
      transactionsRoot: BytesLike,
      sourceHeigh: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    blockHeaderRawDataTest(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { allBlockHash: string; blockTxHash: string }
    >;

    "blockHeaderRawDataTest(bytes)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { allBlockHash: string; blockTxHash: string }
    >;
  };

  filters: {};

  estimateGas: {
    blockHash(
      chainId: BigNumberish,
      prevBlockHash: BytesLike,
      epochBlockHash: BytesLike,
      transactionsRoot: BytesLike,
      sourceHeigh: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockHash(uint64,bytes32,bytes32,bytes32,uint64,uint64)"(
      chainId: BigNumberish,
      prevBlockHash: BytesLike,
      epochBlockHash: BytesLike,
      transactionsRoot: BytesLike,
      sourceHeigh: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockHeaderRawDataTest(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockHeaderRawDataTest(bytes)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockHash(
      chainId: BigNumberish,
      prevBlockHash: BytesLike,
      epochBlockHash: BytesLike,
      transactionsRoot: BytesLike,
      sourceHeigh: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blockHash(uint64,bytes32,bytes32,bytes32,uint64,uint64)"(
      chainId: BigNumberish,
      prevBlockHash: BytesLike,
      epochBlockHash: BytesLike,
      transactionsRoot: BytesLike,
      sourceHeigh: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockHeaderRawDataTest(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blockHeaderRawDataTest(bytes)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
