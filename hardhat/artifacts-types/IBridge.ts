/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IBridgeInterface extends utils.Interface {
  functions: {
    "getNonce(address)": FunctionFragment;
    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)": FunctionFragment;
    "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)": FunctionFragment;
    "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "prepareRqId",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transmitRequestV2",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transmitRequestV2ToSolana",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareRqId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transmitRequestV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transmitRequestV2ToSolana",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transmitRequestV2(
      owner: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)"(
      owner: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transmitRequestV2ToSolana(
      owner: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)"(
      owner: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(address)"(
    from: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prepareRqId(
    oppositeBridge: BytesLike,
    chainId: BigNumberish,
    receiveSide: BytesLike,
    from: BytesLike,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
    oppositeBridge: BytesLike,
    chainId: BigNumberish,
    receiveSide: BytesLike,
    from: BytesLike,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transmitRequestV2(
    owner: BytesLike,
    receiveSide: string,
    oppositeBridge: string,
    chainID: BigNumberish,
    requestId: BytesLike,
    sender: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)"(
    owner: BytesLike,
    receiveSide: string,
    oppositeBridge: string,
    chainID: BigNumberish,
    requestId: BytesLike,
    sender: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transmitRequestV2ToSolana(
    owner: BytesLike,
    receiveSide: BytesLike,
    oppositeBridge: BytesLike,
    chainID: BigNumberish,
    requestId: BytesLike,
    sender: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)"(
    owner: BytesLike,
    receiveSide: BytesLike,
    oppositeBridge: BytesLike,
    chainID: BigNumberish,
    requestId: BytesLike,
    sender: string,
    nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transmitRequestV2(
      owner: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)"(
      owner: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transmitRequestV2ToSolana(
      owner: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)"(
      owner: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transmitRequestV2(
      owner: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)"(
      owner: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transmitRequestV2ToSolana(
      owner: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)"(
      owner: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transmitRequestV2(
      owner: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transmitRequestV2(bytes,address,address,uint256,bytes32,address,uint256)"(
      owner: BytesLike,
      receiveSide: string,
      oppositeBridge: string,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transmitRequestV2ToSolana(
      owner: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transmitRequestV2ToSolana(bytes,bytes32,bytes32,uint256,bytes32,address,uint256)"(
      owner: BytesLike,
      receiveSide: BytesLike,
      oppositeBridge: BytesLike,
      chainID: BigNumberish,
      requestId: BytesLike,
      sender: string,
      nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
