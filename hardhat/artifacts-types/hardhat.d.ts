/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ITokenController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenController__factory>;
    getContractFactory(
      name: "ApproveAndCallFallBack",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApproveAndCallFallBack__factory>;
    getContractFactory(
      name: "Controlled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Controlled__factory>;
    getContractFactory(
      name: "MiniMeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MiniMeToken__factory>;
    getContractFactory(
      name: "MiniMeTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MiniMeTokenFactory__factory>;
    getContractFactory(
      name: "IACL",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IACL__factory>;
    getContractFactory(
      name: "AppStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppStorage__factory>;
    getContractFactory(
      name: "AragonApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AragonApp__factory>;
    getContractFactory(
      name: "Autopetrified",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Autopetrified__factory>;
    getContractFactory(
      name: "IForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForwarder__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "IVaultRecoverable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultRecoverable__factory>;
    getContractFactory(
      name: "Petrifiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Petrifiable__factory>;
    getContractFactory(
      name: "VaultRecoverable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultRecoverable__factory>;
    getContractFactory(
      name: "EVMScriptRunner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EVMScriptRunner__factory>;
    getContractFactory(
      name: "IEVMScriptExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEVMScriptExecutor__factory>;
    getContractFactory(
      name: "IEVMScriptRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEVMScriptRegistry__factory>;
    getContractFactory(
      name: "IKernel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKernel__factory>;
    getContractFactory(
      name: "IKernelEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKernelEvents__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForwarder__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "CurveProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveProxy__factory>;
    getContractFactory(
      name: "IERC20WithPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20WithPermit__factory>;
    getContractFactory(
      name: "IPortal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPortal__factory>;
    getContractFactory(
      name: "ISynthesis",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISynthesis__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IStableSwapPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStableSwapPool__factory>;
    getContractFactory(
      name: "ISyntERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISyntERC20__factory>;
    getContractFactory(
      name: "PermitERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermitERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Portal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Portal__factory>;
    getContractFactory(
      name: "RelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayRecipient__factory>;
    getContractFactory(
      name: "IPortal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPortal__factory>;
    getContractFactory(
      name: "Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: "SolanaSerialize",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SolanaSerialize__factory>;
    getContractFactory(
      name: "SyntERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyntERC20__factory>;
    getContractFactory(
      name: "Synthesis",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Synthesis__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "BridgeCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeCore__factory>;
    getContractFactory(
      name: "FarmingNaive",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FarmingNaive__factory>;
    getContractFactory(
      name: "FarmingUnlockSpeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FarmingUnlockSpeed__factory>;
    getContractFactory(
      name: "IFarming",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFarming__factory>;
    getContractFactory(
      name: "Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Forwarder__factory>;
    getContractFactory(
      name: "IForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForwarder__factory>;
    getContractFactory(
      name: "INodeRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INodeRegistry__factory>;
    getContractFactory(
      name: "IRelayerPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelayerPool__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "MockDexPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockDexPool__factory>;
    getContractFactory(
      name: "VaultMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultMock__factory>;
    getContractFactory(
      name: "NodeRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NodeRegistry__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "RelayerPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayerPool__factory>;
    getContractFactory(
      name: "TestTokenPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTokenPermit__factory>;
    getContractFactory(
      name: "TestForward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestForward__factory>;
    getContractFactory(
      name: "TestTarget",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestTarget__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "TestUniswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUniswap__factory>;
    getContractFactory(
      name: "BasePaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePaymaster__factory>;
    getContractFactory(
      name: "GsnEip712Library",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GsnEip712Library__factory>;
    getContractFactory(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymaster__factory>;
    getContractFactory(
      name: "IRelayHub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelayHub__factory>;
    getContractFactory(
      name: "IRelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelayRecipient__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "RelayHub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayHub__factory>;
    getContractFactory(
      name: "IPancakeRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter01__factory>;
    getContractFactory(
      name: "IPancakeRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter02__factory>;
    getContractFactory(
      name: "IUniswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswap__factory>;
    getContractFactory(
      name: "TokenPaymasterPermitPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenPaymasterPermitPaymaster__factory>;
    getContractFactory(
      name: "BlockTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockTest__factory>;
    getContractFactory(
      name: "MerkleTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleTest__factory>;
    getContractFactory(
      name: "Typecast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Typecast__factory>;
    getContractFactory(
      name: "BaseRelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRelayRecipient__factory>;
    getContractFactory(
      name: "IRelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelayRecipient__factory>;
    getContractFactory(
      name: "FrontHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FrontHelper__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IPancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakePair__factory>;
    getContractFactory(
      name: "ISynthesis",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISynthesis__factory>;
    getContractFactory(
      name: "ProxyAdminHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdminHelper__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxyHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxyHelper__factory>;
    getContractFactory(
      name: "Typecast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Typecast__factory>;
    getContractFactory(
      name: "UniV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniV2Router__factory>;

    getContractAt(
      name: "ITokenController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenController>;
    getContractAt(
      name: "ApproveAndCallFallBack",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApproveAndCallFallBack>;
    getContractAt(
      name: "Controlled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Controlled>;
    getContractAt(
      name: "MiniMeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MiniMeToken>;
    getContractAt(
      name: "MiniMeTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MiniMeTokenFactory>;
    getContractAt(
      name: "IACL",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IACL>;
    getContractAt(
      name: "AppStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AppStorage>;
    getContractAt(
      name: "AragonApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AragonApp>;
    getContractAt(
      name: "Autopetrified",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Autopetrified>;
    getContractAt(
      name: "IForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IForwarder>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "IVaultRecoverable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultRecoverable>;
    getContractAt(
      name: "Petrifiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Petrifiable>;
    getContractAt(
      name: "VaultRecoverable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultRecoverable>;
    getContractAt(
      name: "EVMScriptRunner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EVMScriptRunner>;
    getContractAt(
      name: "IEVMScriptExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEVMScriptExecutor>;
    getContractAt(
      name: "IEVMScriptRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEVMScriptRegistry>;
    getContractAt(
      name: "IKernel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKernel>;
    getContractAt(
      name: "IKernelEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKernelEvents>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IForwarder>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "CurveProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveProxy>;
    getContractAt(
      name: "IERC20WithPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20WithPermit>;
    getContractAt(
      name: "IPortal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPortal>;
    getContractAt(
      name: "ISynthesis",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISynthesis>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IStableSwapPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStableSwapPool>;
    getContractAt(
      name: "ISyntERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISyntERC20>;
    getContractAt(
      name: "PermitERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermitERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Portal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Portal>;
    getContractAt(
      name: "RelayRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayRecipient>;
    getContractAt(
      name: "IPortal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPortal>;
    getContractAt(
      name: "Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Router>;
    getContractAt(
      name: "SolanaSerialize",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SolanaSerialize>;
    getContractAt(
      name: "SyntERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyntERC20>;
    getContractAt(
      name: "Synthesis",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Synthesis>;
    getContractAt(
      name: "Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bridge>;
    getContractAt(
      name: "BridgeCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeCore>;
    getContractAt(
      name: "FarmingNaive",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FarmingNaive>;
    getContractAt(
      name: "FarmingUnlockSpeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FarmingUnlockSpeed>;
    getContractAt(
      name: "IFarming",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFarming>;
    getContractAt(
      name: "Forwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Forwarder>;
    getContractAt(
      name: "IForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IForwarder>;
    getContractAt(
      name: "INodeRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INodeRegistry>;
    getContractAt(
      name: "IRelayerPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelayerPool>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "MockDexPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockDexPool>;
    getContractAt(
      name: "VaultMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultMock>;
    getContractAt(
      name: "NodeRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NodeRegistry>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "RelayerPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayerPool>;
    getContractAt(
      name: "TestTokenPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTokenPermit>;
    getContractAt(
      name: "TestForward",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestForward>;
    getContractAt(
      name: "TestTarget",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestTarget>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "TestUniswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUniswap>;
    getContractAt(
      name: "BasePaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePaymaster>;
    getContractAt(
      name: "GsnEip712Library",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GsnEip712Library>;
    getContractAt(
      name: "IPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymaster>;
    getContractAt(
      name: "IRelayHub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelayHub>;
    getContractAt(
      name: "IRelayRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelayRecipient>;
    getContractAt(
      name: "IStakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "RelayHub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayHub>;
    getContractAt(
      name: "IPancakeRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeRouter01>;
    getContractAt(
      name: "IPancakeRouter02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeRouter02>;
    getContractAt(
      name: "IUniswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswap>;
    getContractAt(
      name: "TokenPaymasterPermitPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenPaymasterPermitPaymaster>;
    getContractAt(
      name: "BlockTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockTest>;
    getContractAt(
      name: "MerkleTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleTest>;
    getContractAt(
      name: "Typecast",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Typecast>;
    getContractAt(
      name: "BaseRelayRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRelayRecipient>;
    getContractAt(
      name: "IRelayRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelayRecipient>;
    getContractAt(
      name: "FrontHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FrontHelper>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IPancakePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakePair>;
    getContractAt(
      name: "ISynthesis",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISynthesis>;
    getContractAt(
      name: "ProxyAdminHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdminHelper>;
    getContractAt(
      name: "TransparentUpgradeableProxyHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxyHelper>;
    getContractAt(
      name: "Typecast",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Typecast>;
    getContractAt(
      name: "UniV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniV2Router>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
