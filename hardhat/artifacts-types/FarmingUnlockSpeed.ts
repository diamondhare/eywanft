/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FarmingUnlockSpeedInterface extends utils.Interface {
  functions: {
    "FACTOR_DENOMINATOR()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getDeposit(address)": FunctionFragment;
    "getReward(address)": FunctionFragment;
    "harvest()": FunctionFragment;
    "lockedOf(address)": FunctionFragment;
    "shareReward(uint256)": FunctionFragment;
    "unclaimedRewardOf(address)": FunctionFragment;
    "unlockedOf(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FACTOR_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getDeposit", values: [string]): string;
  encodeFunctionData(functionFragment: "getReward", values: [string]): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockedOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "shareReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedRewardOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unlockedOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FACTOR_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockedOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shareReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedRewardOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockedOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "Harvest(address,uint256)": EventFragment;
    "RewardShared(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardShared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type HarvestEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type RewardSharedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type RewardSharedEventFilter = TypedEventFilter<RewardSharedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface FarmingUnlockSpeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FarmingUnlockSpeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FACTOR_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FACTOR_DENOMINATOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDeposit(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDeposit(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReward(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getReward(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockedOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shareReward(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "shareReward(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unclaimedRewardOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "unclaimedRewardOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlockedOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "unlockedOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FACTOR_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "FACTOR_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDeposit(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getDeposit(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReward(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getReward(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lockedOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shareReward(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "shareReward(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unclaimedRewardOf(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "unclaimedRewardOf(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlockedOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "unlockedOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FACTOR_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FACTOR_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeposit(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getDeposit(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getReward(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<void>;

    "harvest()"(overrides?: CallOverrides): Promise<void>;

    lockedOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lockedOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareReward(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "shareReward(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unclaimedRewardOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unclaimedRewardOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockedOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "unlockedOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    "Harvest(address,uint256)"(
      user?: string | null,
      amount?: null
    ): HarvestEventFilter;
    Harvest(user?: string | null, amount?: null): HarvestEventFilter;

    "RewardShared(address,uint256)"(
      user?: string | null,
      amount?: null
    ): RewardSharedEventFilter;
    RewardShared(user?: string | null, amount?: null): RewardSharedEventFilter;

    "Withdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    FACTOR_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FACTOR_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDeposit(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getDeposit(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getReward(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lockedOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareReward(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "shareReward(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unclaimedRewardOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unclaimedRewardOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockedOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "unlockedOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FACTOR_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FACTOR_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDeposit(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeposit(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReward(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shareReward(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "shareReward(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unclaimedRewardOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unclaimedRewardOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockedOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unlockedOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
