/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { INodeRegistry, INodeRegistryInterface } from "../INodeRegistry";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "nodeIdAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "blsPubKey",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "nodeId",
            type: "uint256",
          },
        ],
        internalType: "struct INodeRegistry.Node",
        name: "node",
        type: "tuple",
      },
    ],
    name: "addNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_node",
        type: "address",
      },
    ],
    name: "checkPermissionTrustList",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "convertToString",
    outputs: [
      {
        internalType: "string",
        name: "s",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "nodeIdAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "blsPubKey",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "nodeId",
            type: "uint256",
          },
        ],
        internalType: "struct INodeRegistry.Node",
        name: "_node",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "_v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_s",
        type: "bytes32",
      },
    ],
    name: "createRelayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBLSPubKeys",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nodeIdAddress",
        type: "address",
      },
    ],
    name: "getNode",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "nodeIdAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "blsPubKey",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "nodeId",
            type: "uint256",
          },
        ],
        internalType: "struct INodeRegistry.Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNodes",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "nodeIdAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "blsPubKey",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "nodeId",
            type: "uint256",
          },
        ],
        internalType: "struct INodeRegistry.Node[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nodeIdAddr",
        type: "address",
      },
    ],
    name: "nodeExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_nodeIdAddress",
        type: "address",
      },
    ],
    name: "setRelayerFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IRelayerPool.RelayerStatus",
        name: "_status",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_nodeIdAddress",
        type: "address",
      },
    ],
    name: "setRelayerStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class INodeRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): INodeRegistryInterface {
    return new utils.Interface(_abi) as INodeRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): INodeRegistry {
    return new Contract(address, _abi, signerOrProvider) as INodeRegistry;
  }
}
