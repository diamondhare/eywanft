/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestForward, TestForwardInterface } from "../TestForward";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_forwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "FooCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_val",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_str",
        type: "string",
      },
    ],
    name: "foo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "str",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct TestForward.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "requestTypeHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "suffixData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "testExecute",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "string",
        name: "ret",
        type: "string",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "trustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "val",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "versionRecipient",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60018055600280546001600160a01b031916905560c0604052600c60808190526b48656c6c6f20776f726c642160a01b60a090815261004191600491906100d7565b5034801561004e57600080fd5b50604051610a07380380610a0783398101604081905261006d91610170565b6001600160a01b0381166100b65760405162461bcd60e51b815260206004820152600c60248201526b5a45524f204144445245535360a01b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b038316179055506101db565b8280546100e3906101a0565b90600052602060002090601f016020900481019282610105576000855561014b565b82601f1061011e57805160ff191683800117855561014b565b8280016001018555821561014b579182015b8281111561014b578251825591602001919060010190610130565b5061015792915061015b565b5090565b5b80821115610157576000815560010161015c565b60006020828403121561018257600080fd5b81516001600160a01b038116811461019957600080fd5b9392505050565b600181811c908216806101b457607f821691505b602082108114156101d557634e487b7160e01b600052602260045260246000fd5b50919050565b61081d806101ea6000396000f3fe60806040526004361061007b5760003560e01c806367e404ce1161004e57806367e404ce1461012f5780637da0a87714610167578063c15bae8414610185578063c5d1c9951461019a57600080fd5b8063323ccedb146100805780633c6bb436146100aa578063486ff0cd146100ce578063572b6c05146100f0575b600080fd5b61009361008e3660046105a3565b6101bc565b6040516100a1929190610700565b60405180910390f35b3480156100b657600080fd5b506100c060015481565b6040519081526020016100a1565b3480156100da57600080fd5b506100e3610246565b6040516100a19190610723565b3480156100fc57600080fd5b5061011f61010b366004610736565b6000546001600160a01b0391821691161490565b60405190151581526020016100a1565b34801561013b57600080fd5b5060025461014f906001600160a01b031681565b6040516001600160a01b0390911681526020016100a1565b34801561017357600080fd5b506000546001600160a01b031661014f565b34801561019157600080fd5b506100e36102d4565b3480156101a657600080fd5b506101ba6101b5366004610751565b6102e1565b005b6000606060008860a00151511161020c5760405162461bcd60e51b815260206004820152600f60248201526e1c995c4b99185d184818589cd95b9d608a1b60448201526064015b60405180910390fd5b505060408051808201909152601381527272657475726e656420746573742076616c756560681b6020820152600190965096945050505050565b60048054610253906107ac565b80601f016020809104026020016040519081016040528092919081815260200182805461027f906107ac565b80156102cc5780601f106102a1576101008083540402835291602001916102cc565b820191906000526020600020905b8154815290600101906020018083116102af57829003601f168201915b505050505081565b60038054610253906107ac565b8161031b5760405162461bcd60e51b815260206004820152600a6024820152695a45524f2056414c554560b01b6044820152606401610203565b600182905580516103339060039060208401906103c9565b5061033c610395565b600280546001600160a01b0319166001600160a01b039290921691821790556001546040519081527f21d588436ad968dec202ff08608dc590023f4b084bfecdc43ac3ca2fd9922a3a9060200160405180910390a25050565b6000601436108015906103b257506000546001600160a01b031633145b156103c4575060131936013560601c90565b503390565b8280546103d5906107ac565b90600052602060002090601f0160209004810192826103f7576000855561043d565b82601f1061041057805160ff191683800117855561043d565b8280016001018555821561043d579182015b8281111561043d578251825591602001919060010190610422565b5061044992915061044d565b5090565b5b80821115610449576000815560010161044e565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561049b5761049b610462565b60405290565b80356001600160a01b03811681146104b857600080fd5b919050565b600067ffffffffffffffff808411156104d8576104d8610462565b604051601f8501601f19908116603f0116810190828211818310171561050057610500610462565b8160405280935085815286868601111561051957600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261054457600080fd5b610553838335602085016104bd565b9392505050565b60008083601f84011261056c57600080fd5b50813567ffffffffffffffff81111561058457600080fd5b60208301915083602082850101111561059c57600080fd5b9250929050565b60008060008060008060a087890312156105bc57600080fd5b863567ffffffffffffffff808211156105d457600080fd5b9088019060c0828b0312156105e857600080fd5b6105f0610478565b6105f9836104a1565b8152610607602084016104a1565b602082015260408301356040820152606083013560608201526080830135608082015260a08301358281111561063c57600080fd5b6106488c828601610533565b60a08301525097506020890135965060408901359550606089013591508082111561067257600080fd5b61067e8a838b01610533565b9450608089013591508082111561069457600080fd5b506106a189828a0161055a565b979a9699509497509295939492505050565b6000815180845260005b818110156106d9576020818501810151868301820152016106bd565b818111156106eb576000602083870101525b50601f01601f19169290920160200192915050565b821515815260406020820152600061071b60408301846106b3565b949350505050565b60208152600061055360208301846106b3565b60006020828403121561074857600080fd5b610553826104a1565b6000806040838503121561076457600080fd5b82359150602083013567ffffffffffffffff81111561078257600080fd5b8301601f8101851361079357600080fd5b6107a2858235602084016104bd565b9150509250929050565b600181811c908216806107c057607f821691505b602082108114156107e157634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212207a40ef59f51a09cc03fa1f40d3efc624797ad9a83a28107873750a5b78b6431364736f6c634300080a0033";

type TestForwardConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestForwardConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestForward__factory extends ContractFactory {
  constructor(...args: TestForwardConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestForward> {
    return super.deploy(_forwarder, overrides || {}) as Promise<TestForward>;
  }
  getDeployTransaction(
    _forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_forwarder, overrides || {});
  }
  attach(address: string): TestForward {
    return super.attach(address) as TestForward;
  }
  connect(signer: Signer): TestForward__factory {
    return super.connect(signer) as TestForward__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestForwardInterface {
    return new utils.Interface(_abi) as TestForwardInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestForward {
    return new Contract(address, _abi, signerOrProvider) as TestForward;
  }
}
