/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VaultMock, VaultMockInterface } from "../VaultMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "approveInfinity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061052b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a824355814610030575b600080fd5b61004361003e366004610408565b610045565b005b61005b6001600160a01b0383168260001961005f565b5050565b8015806100d95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156100b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d7919061043b565b155b6101495760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261019b9084906101a0565b505050565b60006101f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166102729092919063ffffffff16565b80519091501561019b57808060200190518101906102139190610454565b61019b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610140565b6060610281848460008561028b565b90505b9392505050565b6060824710156102ec5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610140565b843b61033a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610140565b600080866001600160a01b0316858760405161035691906104a6565b60006040518083038185875af1925050503d8060008114610393576040519150601f19603f3d011682016040523d82523d6000602084013e610398565b606091505b50915091506103a88282866103b3565b979650505050505050565b606083156103c2575081610284565b8251156103d25782518084602001fd5b8160405162461bcd60e51b815260040161014091906104c2565b80356001600160a01b038116811461040357600080fd5b919050565b6000806040838503121561041b57600080fd5b610424836103ec565b9150610432602084016103ec565b90509250929050565b60006020828403121561044d57600080fd5b5051919050565b60006020828403121561046657600080fd5b8151801515811461028457600080fd5b60005b83811015610491578181015183820152602001610479565b838111156104a0576000848401525b50505050565b600082516104b8818460208701610476565b9190910192915050565b60208152600082518060208401526104e1816040850160208701610476565b601f01601f1916919091016040019291505056fea26469706673582212208c643ffa8cea294eae8b6f11ea73c452f1264161ebc27d35fac1093a674d9a2364736f6c634300080a0033";

type VaultMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultMock__factory extends ContractFactory {
  constructor(...args: VaultMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VaultMock> {
    return super.deploy(overrides || {}) as Promise<VaultMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VaultMock {
    return super.attach(address) as VaultMock;
  }
  connect(signer: Signer): VaultMock__factory {
    return super.connect(signer) as VaultMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultMockInterface {
    return new utils.Interface(_abi) as VaultMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultMock {
    return new Contract(address, _abi, signerOrProvider) as VaultMock;
  }
}
