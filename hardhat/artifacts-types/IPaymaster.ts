/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type GasAndDataLimitsStruct = {
  acceptanceBudget: BigNumberish;
  preRelayedCallGasLimit: BigNumberish;
  postRelayedCallGasLimit: BigNumberish;
  calldataSizeLimit: BigNumberish;
};

export type GasAndDataLimitsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  acceptanceBudget: BigNumber;
  preRelayedCallGasLimit: BigNumber;
  postRelayedCallGasLimit: BigNumber;
  calldataSizeLimit: BigNumber;
};

export type RelayDataStruct = {
  gasPrice: BigNumberish;
  pctRelayFee: BigNumberish;
  baseRelayFee: BigNumberish;
  relayWorker: string;
  paymaster: string;
  forwarder: string;
  paymasterData: BytesLike;
  clientId: BigNumberish;
};

export type RelayDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  BigNumber
] & {
  gasPrice: BigNumber;
  pctRelayFee: BigNumber;
  baseRelayFee: BigNumber;
  relayWorker: string;
  paymaster: string;
  forwarder: string;
  paymasterData: string;
  clientId: BigNumber;
};

export type ForwardRequestStruct = {
  from: string;
  to: string;
  value: BigNumberish;
  gas: BigNumberish;
  nonce: BigNumberish;
  data: BytesLike;
  validUntil: BigNumberish;
};

export type ForwardRequestStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber
] & {
  from: string;
  to: string;
  value: BigNumber;
  gas: BigNumber;
  nonce: BigNumber;
  data: string;
  validUntil: BigNumber;
};

export type RelayRequestStruct = {
  request: ForwardRequestStruct;
  relayData: RelayDataStruct;
};

export type RelayRequestStructOutput = [
  ForwardRequestStructOutput,
  RelayDataStructOutput
] & { request: ForwardRequestStructOutput; relayData: RelayDataStructOutput };

export interface IPaymasterInterface extends utils.Interface {
  functions: {
    "getGasAndDataLimits()": FunctionFragment;
    "getHubAddr()": FunctionFragment;
    "getRelayHubDeposit()": FunctionFragment;
    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": FunctionFragment;
    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "versionPaymaster()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getGasAndDataLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayHubDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [BytesLike, boolean, BigNumberish, RelayDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [RelayRequestStruct, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionPaymaster",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getGasAndDataLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRelayHubDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionPaymaster",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPaymaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPaymasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getGasAndDataLimits(
      overrides?: CallOverrides
    ): Promise<
      [GasAndDataLimitsStructOutput] & { limits: GasAndDataLimitsStructOutput }
    >;

    "getGasAndDataLimits()"(
      overrides?: CallOverrides
    ): Promise<
      [GasAndDataLimitsStructOutput] & { limits: GasAndDataLimitsStructOutput }
    >;

    getHubAddr(overrides?: CallOverrides): Promise<[string]>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<[string]>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preRelayedCall(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<[string]>;

    versionPaymaster(overrides?: CallOverrides): Promise<[string]>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<[string]>;
  };

  getGasAndDataLimits(
    overrides?: CallOverrides
  ): Promise<GasAndDataLimitsStructOutput>;

  "getGasAndDataLimits()"(
    overrides?: CallOverrides
  ): Promise<GasAndDataLimitsStructOutput>;

  getHubAddr(overrides?: CallOverrides): Promise<string>;

  "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

  getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  postRelayedCall(
    context: BytesLike,
    success: boolean,
    gasUseWithoutPost: BigNumberish,
    relayData: RelayDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
    context: BytesLike,
    success: boolean,
    gasUseWithoutPost: BigNumberish,
    relayData: RelayDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preRelayedCall(
    relayRequest: RelayRequestStruct,
    signature: BytesLike,
    approvalData: BytesLike,
    maxPossibleGas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
    relayRequest: RelayRequestStruct,
    signature: BytesLike,
    approvalData: BytesLike,
    maxPossibleGas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

  versionPaymaster(overrides?: CallOverrides): Promise<string>;

  "versionPaymaster()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getGasAndDataLimits(
      overrides?: CallOverrides
    ): Promise<GasAndDataLimitsStructOutput>;

    "getGasAndDataLimits()"(
      overrides?: CallOverrides
    ): Promise<GasAndDataLimitsStructOutput>;

    getHubAddr(overrides?: CallOverrides): Promise<string>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    preRelayedCall(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { context: string; rejectOnRecipientRevert: boolean }
    >;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { context: string; rejectOnRecipientRevert: boolean }
    >;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

    versionPaymaster(overrides?: CallOverrides): Promise<string>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getGasAndDataLimits(overrides?: CallOverrides): Promise<BigNumber>;

    "getGasAndDataLimits()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHubAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preRelayedCall(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    versionPaymaster(overrides?: CallOverrides): Promise<BigNumber>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getGasAndDataLimits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGasAndDataLimits()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHubAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRelayHubDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRelayHubDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preRelayedCall(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustedForwarder()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionPaymaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionPaymaster()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
