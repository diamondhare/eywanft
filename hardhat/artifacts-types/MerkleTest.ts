/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MerkleTestInterface extends utils.Interface {
  functions: {
    "blockMerkleProveTest(bytes,bytes32)": FunctionFragment;
    "merkleProveTest(bytes,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blockMerkleProveTest",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleProveTest",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "blockMerkleProveTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleProveTest",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MerkleTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MerkleTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockMerkleProveTest(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        bridgeFrom: string;
        reqId: string;
        sel: string;
        receiveSide: string;
      }
    >;

    "blockMerkleProveTest(bytes,bytes32)"(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        bridgeFrom: string;
        reqId: string;
        sel: string;
        receiveSide: string;
      }
    >;

    merkleProveTest(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "merkleProveTest(bytes,bytes32)"(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  blockMerkleProveTest(
    _auditPath: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      bridgeFrom: string;
      reqId: string;
      sel: string;
      receiveSide: string;
    }
  >;

  "blockMerkleProveTest(bytes,bytes32)"(
    _auditPath: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      bridgeFrom: string;
      reqId: string;
      sel: string;
      receiveSide: string;
    }
  >;

  merkleProveTest(
    _auditPath: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "merkleProveTest(bytes,bytes32)"(
    _auditPath: BytesLike,
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    blockMerkleProveTest(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        bridgeFrom: string;
        reqId: string;
        sel: string;
        receiveSide: string;
      }
    >;

    "blockMerkleProveTest(bytes,bytes32)"(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        bridgeFrom: string;
        reqId: string;
        sel: string;
        receiveSide: string;
      }
    >;

    merkleProveTest(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "merkleProveTest(bytes,bytes32)"(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    blockMerkleProveTest(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blockMerkleProveTest(bytes,bytes32)"(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleProveTest(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "merkleProveTest(bytes,bytes32)"(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockMerkleProveTest(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blockMerkleProveTest(bytes,bytes32)"(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleProveTest(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "merkleProveTest(bytes,bytes32)"(
      _auditPath: BytesLike,
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
