/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BridgeCoreInterface extends utils.Interface {
  functions: {
    "_listNode()": FunctionFragment;
    "addContractBind(bytes32,bytes32,bytes32)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_listNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addContractBind",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "prepareRqId",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_listNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addContractBind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareRqId",
    data: BytesLike
  ): Result;

  events: {
    "OracleRequest(string,address,bytes32,bytes,address,address,uint256)": EventFragment;
    "OracleRequestSolana(string,bytes32,bytes32,bytes,bytes32,uint256)": EventFragment;
    "ReceiveRequest(bytes32,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OracleRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequestSolana"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveRequest"): EventFragment;
}

export type OracleRequestEvent = TypedEvent<
  [string, string, string, string, string, string, BigNumber],
  {
    requestType: string;
    bridge: string;
    requestId: string;
    selector: string;
    receiveSide: string;
    oppositeBridge: string;
    chainid: BigNumber;
  }
>;

export type OracleRequestEventFilter = TypedEventFilter<OracleRequestEvent>;

export type OracleRequestSolanaEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  {
    requestType: string;
    bridge: string;
    requestId: string;
    selector: string;
    oppositeBridge: string;
    chainid: BigNumber;
  }
>;

export type OracleRequestSolanaEventFilter =
  TypedEventFilter<OracleRequestSolanaEvent>;

export type ReceiveRequestEvent = TypedEvent<
  [string, string, string],
  { reqId: string; receiveSide: string; bridgeFrom: string }
>;

export type ReceiveRequestEventFilter = TypedEventFilter<ReceiveRequestEvent>;

export interface BridgeCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _listNode(overrides?: CallOverrides): Promise<[string]>;

    "_listNode()"(overrides?: CallOverrides): Promise<[string]>;

    addContractBind(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addContractBind(bytes32,bytes32,bytes32)"(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  _listNode(overrides?: CallOverrides): Promise<string>;

  "_listNode()"(overrides?: CallOverrides): Promise<string>;

  addContractBind(
    from: BytesLike,
    oppositeBridge: BytesLike,
    to: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addContractBind(bytes32,bytes32,bytes32)"(
    from: BytesLike,
    oppositeBridge: BytesLike,
    to: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(address)"(
    from: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prepareRqId(
    oppositeBridge: BytesLike,
    chainId: BigNumberish,
    receiveSide: BytesLike,
    from: BytesLike,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
    oppositeBridge: BytesLike,
    chainId: BigNumberish,
    receiveSide: BytesLike,
    from: BytesLike,
    nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    _listNode(overrides?: CallOverrides): Promise<string>;

    "_listNode()"(overrides?: CallOverrides): Promise<string>;

    addContractBind(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addContractBind(bytes32,bytes32,bytes32)"(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "OracleRequest(string,address,bytes32,bytes,address,address,uint256)"(
      requestType?: null,
      bridge?: null,
      requestId?: null,
      selector?: null,
      receiveSide?: null,
      oppositeBridge?: null,
      chainid?: null
    ): OracleRequestEventFilter;
    OracleRequest(
      requestType?: null,
      bridge?: null,
      requestId?: null,
      selector?: null,
      receiveSide?: null,
      oppositeBridge?: null,
      chainid?: null
    ): OracleRequestEventFilter;

    "OracleRequestSolana(string,bytes32,bytes32,bytes,bytes32,uint256)"(
      requestType?: null,
      bridge?: null,
      requestId?: null,
      selector?: null,
      oppositeBridge?: null,
      chainid?: null
    ): OracleRequestSolanaEventFilter;
    OracleRequestSolana(
      requestType?: null,
      bridge?: null,
      requestId?: null,
      selector?: null,
      oppositeBridge?: null,
      chainid?: null
    ): OracleRequestSolanaEventFilter;

    "ReceiveRequest(bytes32,address,bytes32)"(
      reqId?: null,
      receiveSide?: null,
      bridgeFrom?: null
    ): ReceiveRequestEventFilter;
    ReceiveRequest(
      reqId?: null,
      receiveSide?: null,
      bridgeFrom?: null
    ): ReceiveRequestEventFilter;
  };

  estimateGas: {
    _listNode(overrides?: CallOverrides): Promise<BigNumber>;

    "_listNode()"(overrides?: CallOverrides): Promise<BigNumber>;

    addContractBind(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addContractBind(bytes32,bytes32,bytes32)"(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _listNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_listNode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addContractBind(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addContractBind(bytes32,bytes32,bytes32)"(
      from: BytesLike,
      oppositeBridge: BytesLike,
      to: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareRqId(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prepareRqId(bytes32,uint256,bytes32,bytes32,uint256)"(
      oppositeBridge: BytesLike,
      chainId: BigNumberish,
      receiveSide: BytesLike,
      from: BytesLike,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
