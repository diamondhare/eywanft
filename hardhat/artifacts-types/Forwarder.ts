/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ForwardRequestStruct = {
  from: string;
  to: string;
  value: BigNumberish;
  gas: BigNumberish;
  nonce: BigNumberish;
  data: BytesLike;
};

export type ForwardRequestStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  from: string;
  to: string;
  value: BigNumber;
  gas: BigNumber;
  nonce: BigNumber;
  data: string;
};

export interface ForwarderInterface extends utils.Interface {
  functions: {
    "GENERIC_PARAMS()": FunctionFragment;
    "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)": FunctionFragment;
    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)": FunctionFragment;
    "getAbiEncodeRequest((address,address,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "registerRequestType(string,string)": FunctionFragment;
    "typeHashes(bytes32)": FunctionFragment;
    "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GENERIC_PARAMS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getEncoded",
    values: [ForwardRequestStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [ForwardRequestStruct, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAbiEncodeRequest",
    values: [ForwardRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerRequestType",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "typeHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [ForwardRequestStruct, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "GENERIC_PARAMS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getEncoded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAbiEncodeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRequestType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "typeHashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "RequestTypeRegistered(bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequestTypeRegistered"): EventFragment;
}

export type RequestTypeRegisteredEvent = TypedEvent<
  [string, string],
  { typeHash: string; typeStr: string }
>;

export type RequestTypeRegisteredEventFilter =
  TypedEventFilter<RequestTypeRegisteredEvent>;

export interface Forwarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ForwarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GENERIC_PARAMS(overrides?: CallOverrides): Promise<[string]>;

    "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<[string]>;

    _getEncoded(
      req: ForwardRequestStruct,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)"(
      req: ForwardRequestStruct,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    execute(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAbiEncodeRequest(
      req: ForwardRequestStruct,
      reqAbiEncode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAbiEncodeRequest((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: ForwardRequestStruct,
      reqAbiEncode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verify(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  GENERIC_PARAMS(overrides?: CallOverrides): Promise<string>;

  "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<string>;

  _getEncoded(
    req: ForwardRequestStruct,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)"(
    req: ForwardRequestStruct,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  execute(
    req: ForwardRequestStruct,
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
    req: ForwardRequestStruct,
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAbiEncodeRequest(
    req: ForwardRequestStruct,
    reqAbiEncode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAbiEncodeRequest((address,address,uint256,uint256,uint256,bytes),bytes)"(
    req: ForwardRequestStruct,
    reqAbiEncode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(address)"(
    from: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerRequestType(
    typeName: string,
    typeSuffix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerRequestType(string,string)"(
    typeName: string,
    typeSuffix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "typeHashes(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify(
    req: ForwardRequestStruct,
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
    req: ForwardRequestStruct,
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    GENERIC_PARAMS(overrides?: CallOverrides): Promise<string>;

    "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<string>;

    _getEncoded(
      req: ForwardRequestStruct,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)"(
      req: ForwardRequestStruct,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    execute(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    getAbiEncodeRequest(
      req: ForwardRequestStruct,
      reqAbiEncode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAbiEncodeRequest((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: ForwardRequestStruct,
      reqAbiEncode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: CallOverrides
    ): Promise<void>;

    typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RequestTypeRegistered(bytes32,string)"(
      typeHash?: BytesLike | null,
      typeStr?: null
    ): RequestTypeRegisteredEventFilter;
    RequestTypeRegistered(
      typeHash?: BytesLike | null,
      typeStr?: null
    ): RequestTypeRegisteredEventFilter;
  };

  estimateGas: {
    GENERIC_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    "GENERIC_PARAMS()"(overrides?: CallOverrides): Promise<BigNumber>;

    _getEncoded(
      req: ForwardRequestStruct,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)"(
      req: ForwardRequestStruct,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAbiEncodeRequest(
      req: ForwardRequestStruct,
      reqAbiEncode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAbiEncodeRequest((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: ForwardRequestStruct,
      reqAbiEncode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    typeHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GENERIC_PARAMS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GENERIC_PARAMS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getEncoded(
      req: ForwardRequestStruct,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_getEncoded((address,address,uint256,uint256,uint256,bytes),bytes32,bytes)"(
      req: ForwardRequestStruct,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "execute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAbiEncodeRequest(
      req: ForwardRequestStruct,
      reqAbiEncode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAbiEncodeRequest((address,address,uint256,uint256,uint256,bytes),bytes)"(
      req: ForwardRequestStruct,
      reqAbiEncode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerRequestType(string,string)"(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    typeHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "typeHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verify((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
