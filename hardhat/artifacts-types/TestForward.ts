/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ForwardRequestStruct = {
  from: string;
  to: string;
  value: BigNumberish;
  gas: BigNumberish;
  nonce: BigNumberish;
  data: BytesLike;
};

export type ForwardRequestStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  from: string;
  to: string;
  value: BigNumber;
  gas: BigNumber;
  nonce: BigNumber;
  data: string;
};

export interface TestForwardInterface extends utils.Interface {
  functions: {
    "foo(uint256,string)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "sender()": FunctionFragment;
    "str()": FunctionFragment;
    "testExecute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "val()": FunctionFragment;
    "versionRecipient()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "foo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sender", values?: undefined): string;
  encodeFunctionData(functionFragment: "str", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testExecute",
    values: [ForwardRequestStruct, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "val", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "foo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "str", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "val", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;

  events: {
    "FooCalled(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FooCalled"): EventFragment;
}

export type FooCalledEvent = TypedEvent<
  [string, BigNumber],
  { caller: string; val: BigNumber }
>;

export type FooCalledEventFilter = TypedEventFilter<FooCalledEvent>;

export interface TestForward extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestForwardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    foo(
      _val: BigNumberish,
      _str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "foo(uint256,string)"(
      _val: BigNumberish,
      _str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sender(overrides?: CallOverrides): Promise<[string]>;

    "sender()"(overrides?: CallOverrides): Promise<[string]>;

    str(overrides?: CallOverrides): Promise<[string]>;

    "str()"(overrides?: CallOverrides): Promise<[string]>;

    testExecute(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "testExecute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<[string]>;

    val(overrides?: CallOverrides): Promise<[BigNumber]>;

    "val()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    versionRecipient(overrides?: CallOverrides): Promise<[string]>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<[string]>;
  };

  foo(
    _val: BigNumberish,
    _str: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "foo(uint256,string)"(
    _val: BigNumberish,
    _str: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTrustedForwarder(address)"(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sender(overrides?: CallOverrides): Promise<string>;

  "sender()"(overrides?: CallOverrides): Promise<string>;

  str(overrides?: CallOverrides): Promise<string>;

  "str()"(overrides?: CallOverrides): Promise<string>;

  testExecute(
    req: ForwardRequestStruct,
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "testExecute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
    req: ForwardRequestStruct,
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

  val(overrides?: CallOverrides): Promise<BigNumber>;

  "val()"(overrides?: CallOverrides): Promise<BigNumber>;

  versionRecipient(overrides?: CallOverrides): Promise<string>;

  "versionRecipient()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    foo(
      _val: BigNumberish,
      _str: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "foo(uint256,string)"(
      _val: BigNumberish,
      _str: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sender(overrides?: CallOverrides): Promise<string>;

    "sender()"(overrides?: CallOverrides): Promise<string>;

    str(overrides?: CallOverrides): Promise<string>;

    "str()"(overrides?: CallOverrides): Promise<string>;

    testExecute(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    "testExecute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

    val(overrides?: CallOverrides): Promise<BigNumber>;

    "val()"(overrides?: CallOverrides): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<string>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FooCalled(address,uint256)"(
      caller?: string | null,
      val?: null
    ): FooCalledEventFilter;
    FooCalled(caller?: string | null, val?: null): FooCalledEventFilter;
  };

  estimateGas: {
    foo(
      _val: BigNumberish,
      _str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "foo(uint256,string)"(
      _val: BigNumberish,
      _str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sender(overrides?: CallOverrides): Promise<BigNumber>;

    "sender()"(overrides?: CallOverrides): Promise<BigNumber>;

    str(overrides?: CallOverrides): Promise<BigNumber>;

    "str()"(overrides?: CallOverrides): Promise<BigNumber>;

    testExecute(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "testExecute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    val(overrides?: CallOverrides): Promise<BigNumber>;

    "val()"(overrides?: CallOverrides): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    foo(
      _val: BigNumberish,
      _str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "foo(uint256,string)"(
      _val: BigNumberish,
      _str: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    str(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "str()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testExecute(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "testExecute((address,address,uint256,uint256,uint256,bytes),bytes32,bytes32,bytes,bytes)"(
      req: ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustedForwarder()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    val(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "val()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionRecipient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
