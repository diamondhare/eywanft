/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RelayHubConfigStruct = {
  maxWorkerCount: BigNumberish;
  gasReserve: BigNumberish;
  postOverhead: BigNumberish;
  gasOverhead: BigNumberish;
  maximumRecipientDeposit: BigNumberish;
  minimumUnstakeDelay: BigNumberish;
  minimumStake: BigNumberish;
  dataGasCostPerByte: BigNumberish;
  externalCallDataCostOverhead: BigNumberish;
};

export type RelayHubConfigStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  maxWorkerCount: BigNumber;
  gasReserve: BigNumber;
  postOverhead: BigNumber;
  gasOverhead: BigNumber;
  maximumRecipientDeposit: BigNumber;
  minimumUnstakeDelay: BigNumber;
  minimumStake: BigNumber;
  dataGasCostPerByte: BigNumber;
  externalCallDataCostOverhead: BigNumber;
};

export type RelayDataStruct = {
  gasPrice: BigNumberish;
  pctRelayFee: BigNumberish;
  baseRelayFee: BigNumberish;
  relayWorker: string;
  paymaster: string;
  forwarder: string;
  paymasterData: BytesLike;
  clientId: BigNumberish;
};

export type RelayDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  BigNumber
] & {
  gasPrice: BigNumber;
  pctRelayFee: BigNumber;
  baseRelayFee: BigNumber;
  relayWorker: string;
  paymaster: string;
  forwarder: string;
  paymasterData: string;
  clientId: BigNumber;
};

export type ForwardRequestStruct = {
  from: string;
  to: string;
  value: BigNumberish;
  gas: BigNumberish;
  nonce: BigNumberish;
  data: BytesLike;
  validUntil: BigNumberish;
};

export type ForwardRequestStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber
] & {
  from: string;
  to: string;
  value: BigNumber;
  gas: BigNumber;
  nonce: BigNumber;
  data: string;
  validUntil: BigNumber;
};

export type RelayRequestStruct = {
  request: ForwardRequestStruct;
  relayData: RelayDataStruct;
};

export type RelayRequestStructOutput = [
  ForwardRequestStructOutput,
  RelayDataStructOutput
] & { request: ForwardRequestStructOutput; relayData: RelayDataStructOutput };

export interface IRelayHubInterface extends utils.Interface {
  functions: {
    "addRelayWorkers(address[])": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": FunctionFragment;
    "calldataGasCost(uint256)": FunctionFragment;
    "depositFor(address)": FunctionFragment;
    "deprecateHub(uint256)": FunctionFragment;
    "deprecationBlock()": FunctionFragment;
    "getConfiguration()": FunctionFragment;
    "isDeprecated()": FunctionFragment;
    "isRelayManagerStaked(address)": FunctionFragment;
    "penalize(address,address)": FunctionFragment;
    "penalizer()": FunctionFragment;
    "registerRelayServer(uint256,uint256,string)": FunctionFragment;
    "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": FunctionFragment;
    "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "stakeManager()": FunctionFragment;
    "versionHub()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "workerCount(address)": FunctionFragment;
    "workerToManager(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRelayWorkers",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateCharge",
    values: [BigNumberish, RelayDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "calldataGasCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "depositFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deprecateHub",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deprecationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDeprecated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRelayManagerStaked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "penalize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "penalizer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerRelayServer",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "relayCall",
    values: [
      BigNumberish,
      RelayRequestStruct,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfiguration",
    values: [RelayHubConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionHub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "workerCount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "workerToManager",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRelayWorkers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calldataGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deprecateHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deprecationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRelayManagerStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "penalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "penalizer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRelayServer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versionHub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerToManager",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(address,address,uint256)": EventFragment;
    "HubDeprecated(uint256)": EventFragment;
    "RelayHubConfigured(tuple)": EventFragment;
    "RelayServerRegistered(address,uint256,uint256,string)": EventFragment;
    "RelayWorkersAdded(address,address[],uint256)": EventFragment;
    "TransactionRejectedByPaymaster(address,address,address,address,address,bytes4,uint256,bytes)": EventFragment;
    "TransactionRelayed(address,address,address,address,address,bytes4,uint8,uint256)": EventFragment;
    "TransactionResult(uint8,bytes)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HubDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayHubConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayServerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayWorkersAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransactionRejectedByPaymaster"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionRelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type DepositedEvent = TypedEvent<
  [string, string, BigNumber],
  { paymaster: string; from: string; amount: BigNumber }
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type HubDeprecatedEvent = TypedEvent<
  [BigNumber],
  { fromBlock: BigNumber }
>;

export type HubDeprecatedEventFilter = TypedEventFilter<HubDeprecatedEvent>;

export type RelayHubConfiguredEvent = TypedEvent<
  [RelayHubConfigStructOutput],
  { config: RelayHubConfigStructOutput }
>;

export type RelayHubConfiguredEventFilter =
  TypedEventFilter<RelayHubConfiguredEvent>;

export type RelayServerRegisteredEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  {
    relayManager: string;
    baseRelayFee: BigNumber;
    pctRelayFee: BigNumber;
    relayUrl: string;
  }
>;

export type RelayServerRegisteredEventFilter =
  TypedEventFilter<RelayServerRegisteredEvent>;

export type RelayWorkersAddedEvent = TypedEvent<
  [string, string[], BigNumber],
  { relayManager: string; newRelayWorkers: string[]; workersCount: BigNumber }
>;

export type RelayWorkersAddedEventFilter =
  TypedEventFilter<RelayWorkersAddedEvent>;

export type TransactionRejectedByPaymasterEvent = TypedEvent<
  [string, string, string, string, string, string, BigNumber, string],
  {
    relayManager: string;
    paymaster: string;
    from: string;
    to: string;
    relayWorker: string;
    selector: string;
    innerGasUsed: BigNumber;
    reason: string;
  }
>;

export type TransactionRejectedByPaymasterEventFilter =
  TypedEventFilter<TransactionRejectedByPaymasterEvent>;

export type TransactionRelayedEvent = TypedEvent<
  [string, string, string, string, string, string, number, BigNumber],
  {
    relayManager: string;
    relayWorker: string;
    from: string;
    to: string;
    paymaster: string;
    selector: string;
    status: number;
    charge: BigNumber;
  }
>;

export type TransactionRelayedEventFilter =
  TypedEventFilter<TransactionRelayedEvent>;

export type TransactionResultEvent = TypedEvent<
  [number, string],
  { status: number; returnValue: string }
>;

export type TransactionResultEventFilter =
  TypedEventFilter<TransactionResultEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; dest: string; amount: BigNumber }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface IRelayHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRelayHubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRelayWorkers(
      newRelayWorkers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addRelayWorkers(address[])"(
      newRelayWorkers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(target: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateCharge(
      gasUsed: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      gasUsed: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calldataGasCost(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calldataGasCost(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositFor(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositFor(address)"(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecateHub(
      fromBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deprecateHub(uint256)"(
      fromBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deprecationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "deprecationBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [RelayHubConfigStructOutput] & { config: RelayHubConfigStructOutput }
    >;

    "getConfiguration()"(
      overrides?: CallOverrides
    ): Promise<
      [RelayHubConfigStructOutput] & { config: RelayHubConfigStructOutput }
    >;

    isDeprecated(overrides?: CallOverrides): Promise<[boolean]>;

    "isDeprecated()"(overrides?: CallOverrides): Promise<[boolean]>;

    isRelayManagerStaked(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isRelayManagerStaked(address)"(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    penalize(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "penalize(address,address)"(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    penalizer(overrides?: CallOverrides): Promise<[string]>;

    "penalizer()"(overrides?: CallOverrides): Promise<[string]>;

    registerRelayServer(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerRelayServer(uint256,uint256,string)"(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relayCall(
      maxAcceptanceBudget: BigNumberish,
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      maxAcceptanceBudget: BigNumberish,
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfiguration(
      _config: RelayHubConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      _config: RelayHubConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeManager(overrides?: CallOverrides): Promise<[string]>;

    "stakeManager()"(overrides?: CallOverrides): Promise<[string]>;

    versionHub(overrides?: CallOverrides): Promise<[string]>;

    "versionHub()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workerCount(
      manager: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "workerCount(address)"(
      manager: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workerToManager(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "workerToManager(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addRelayWorkers(
    newRelayWorkers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addRelayWorkers(address[])"(
    newRelayWorkers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    target: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateCharge(
    gasUsed: BigNumberish,
    relayData: RelayDataStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
    gasUsed: BigNumberish,
    relayData: RelayDataStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calldataGasCost(
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calldataGasCost(uint256)"(
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositFor(
    target: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositFor(address)"(
    target: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecateHub(
    fromBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deprecateHub(uint256)"(
    fromBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deprecationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "deprecationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  getConfiguration(
    overrides?: CallOverrides
  ): Promise<RelayHubConfigStructOutput>;

  "getConfiguration()"(
    overrides?: CallOverrides
  ): Promise<RelayHubConfigStructOutput>;

  isDeprecated(overrides?: CallOverrides): Promise<boolean>;

  "isDeprecated()"(overrides?: CallOverrides): Promise<boolean>;

  isRelayManagerStaked(
    relayManager: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRelayManagerStaked(address)"(
    relayManager: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  penalize(
    relayWorker: string,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "penalize(address,address)"(
    relayWorker: string,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  penalizer(overrides?: CallOverrides): Promise<string>;

  "penalizer()"(overrides?: CallOverrides): Promise<string>;

  registerRelayServer(
    baseRelayFee: BigNumberish,
    pctRelayFee: BigNumberish,
    url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerRelayServer(uint256,uint256,string)"(
    baseRelayFee: BigNumberish,
    pctRelayFee: BigNumberish,
    url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relayCall(
    maxAcceptanceBudget: BigNumberish,
    relayRequest: RelayRequestStruct,
    signature: BytesLike,
    approvalData: BytesLike,
    externalGasLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
    maxAcceptanceBudget: BigNumberish,
    relayRequest: RelayRequestStruct,
    signature: BytesLike,
    approvalData: BytesLike,
    externalGasLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfiguration(
    _config: RelayHubConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
    _config: RelayHubConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeManager(overrides?: CallOverrides): Promise<string>;

  "stakeManager()"(overrides?: CallOverrides): Promise<string>;

  versionHub(overrides?: CallOverrides): Promise<string>;

  "versionHub()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: BigNumberish,
    dest: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address)"(
    amount: BigNumberish,
    dest: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workerCount(manager: string, overrides?: CallOverrides): Promise<BigNumber>;

  "workerCount(address)"(
    manager: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  workerToManager(worker: string, overrides?: CallOverrides): Promise<string>;

  "workerToManager(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addRelayWorkers(
      newRelayWorkers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addRelayWorkers(address[])"(
      newRelayWorkers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCharge(
      gasUsed: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      gasUsed: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calldataGasCost(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calldataGasCost(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFor(target: string, overrides?: CallOverrides): Promise<void>;

    "depositFor(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deprecateHub(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deprecateHub(uint256)"(
      fromBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deprecationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "deprecationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getConfiguration(
      overrides?: CallOverrides
    ): Promise<RelayHubConfigStructOutput>;

    "getConfiguration()"(
      overrides?: CallOverrides
    ): Promise<RelayHubConfigStructOutput>;

    isDeprecated(overrides?: CallOverrides): Promise<boolean>;

    "isDeprecated()"(overrides?: CallOverrides): Promise<boolean>;

    isRelayManagerStaked(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRelayManagerStaked(address)"(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    penalize(
      relayWorker: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "penalize(address,address)"(
      relayWorker: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    penalizer(overrides?: CallOverrides): Promise<string>;

    "penalizer()"(overrides?: CallOverrides): Promise<string>;

    registerRelayServer(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerRelayServer(uint256,uint256,string)"(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    relayCall(
      maxAcceptanceBudget: BigNumberish,
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { paymasterAccepted: boolean; returnValue: string }
    >;

    "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      maxAcceptanceBudget: BigNumberish,
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { paymasterAccepted: boolean; returnValue: string }
    >;

    setConfiguration(
      _config: RelayHubConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      _config: RelayHubConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeManager(overrides?: CallOverrides): Promise<string>;

    "stakeManager()"(overrides?: CallOverrides): Promise<string>;

    versionHub(overrides?: CallOverrides): Promise<string>;

    "versionHub()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      dest: string,
      overrides?: CallOverrides
    ): Promise<void>;

    workerCount(manager: string, overrides?: CallOverrides): Promise<BigNumber>;

    "workerCount(address)"(
      manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workerToManager(worker: string, overrides?: CallOverrides): Promise<string>;

    "workerToManager(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Deposited(address,address,uint256)"(
      paymaster?: string | null,
      from?: string | null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(
      paymaster?: string | null,
      from?: string | null,
      amount?: null
    ): DepositedEventFilter;

    "HubDeprecated(uint256)"(fromBlock?: null): HubDeprecatedEventFilter;
    HubDeprecated(fromBlock?: null): HubDeprecatedEventFilter;

    "RelayHubConfigured(tuple)"(config?: null): RelayHubConfiguredEventFilter;
    RelayHubConfigured(config?: null): RelayHubConfiguredEventFilter;

    "RelayServerRegistered(address,uint256,uint256,string)"(
      relayManager?: string | null,
      baseRelayFee?: null,
      pctRelayFee?: null,
      relayUrl?: null
    ): RelayServerRegisteredEventFilter;
    RelayServerRegistered(
      relayManager?: string | null,
      baseRelayFee?: null,
      pctRelayFee?: null,
      relayUrl?: null
    ): RelayServerRegisteredEventFilter;

    "RelayWorkersAdded(address,address[],uint256)"(
      relayManager?: string | null,
      newRelayWorkers?: null,
      workersCount?: null
    ): RelayWorkersAddedEventFilter;
    RelayWorkersAdded(
      relayManager?: string | null,
      newRelayWorkers?: null,
      workersCount?: null
    ): RelayWorkersAddedEventFilter;

    "TransactionRejectedByPaymaster(address,address,address,address,address,bytes4,uint256,bytes)"(
      relayManager?: string | null,
      paymaster?: string | null,
      from?: string | null,
      to?: null,
      relayWorker?: null,
      selector?: null,
      innerGasUsed?: null,
      reason?: null
    ): TransactionRejectedByPaymasterEventFilter;
    TransactionRejectedByPaymaster(
      relayManager?: string | null,
      paymaster?: string | null,
      from?: string | null,
      to?: null,
      relayWorker?: null,
      selector?: null,
      innerGasUsed?: null,
      reason?: null
    ): TransactionRejectedByPaymasterEventFilter;

    "TransactionRelayed(address,address,address,address,address,bytes4,uint8,uint256)"(
      relayManager?: string | null,
      relayWorker?: string | null,
      from?: string | null,
      to?: null,
      paymaster?: null,
      selector?: null,
      status?: null,
      charge?: null
    ): TransactionRelayedEventFilter;
    TransactionRelayed(
      relayManager?: string | null,
      relayWorker?: string | null,
      from?: string | null,
      to?: null,
      paymaster?: null,
      selector?: null,
      status?: null,
      charge?: null
    ): TransactionRelayedEventFilter;

    "TransactionResult(uint8,bytes)"(
      status?: null,
      returnValue?: null
    ): TransactionResultEventFilter;
    TransactionResult(
      status?: null,
      returnValue?: null
    ): TransactionResultEventFilter;

    "Withdrawn(address,address,uint256)"(
      account?: string | null,
      dest?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      account?: string | null,
      dest?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    addRelayWorkers(
      newRelayWorkers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addRelayWorkers(address[])"(
      newRelayWorkers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateCharge(
      gasUsed: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      gasUsed: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calldataGasCost(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calldataGasCost(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFor(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositFor(address)"(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecateHub(
      fromBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deprecateHub(uint256)"(
      fromBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deprecationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "deprecationBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    "getConfiguration()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDeprecated(overrides?: CallOverrides): Promise<BigNumber>;

    "isDeprecated()"(overrides?: CallOverrides): Promise<BigNumber>;

    isRelayManagerStaked(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRelayManagerStaked(address)"(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penalize(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "penalize(address,address)"(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    penalizer(overrides?: CallOverrides): Promise<BigNumber>;

    "penalizer()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerRelayServer(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerRelayServer(uint256,uint256,string)"(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relayCall(
      maxAcceptanceBudget: BigNumberish,
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      maxAcceptanceBudget: BigNumberish,
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfiguration(
      _config: RelayHubConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      _config: RelayHubConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeManager(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    versionHub(overrides?: CallOverrides): Promise<BigNumber>;

    "versionHub()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workerCount(manager: string, overrides?: CallOverrides): Promise<BigNumber>;

    "workerCount(address)"(
      manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workerToManager(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workerToManager(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRelayWorkers(
      newRelayWorkers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addRelayWorkers(address[])"(
      newRelayWorkers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateCharge(
      gasUsed: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateCharge(uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))"(
      gasUsed: BigNumberish,
      relayData: RelayDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calldataGasCost(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calldataGasCost(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFor(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositFor(address)"(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecateHub(
      fromBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deprecateHub(uint256)"(
      fromBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deprecationBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deprecationBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfiguration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getConfiguration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isDeprecated()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRelayManagerStaked(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRelayManagerStaked(address)"(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    penalize(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "penalize(address,address)"(
      relayWorker: string,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    penalizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "penalizer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerRelayServer(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerRelayServer(uint256,uint256,string)"(
      baseRelayFee: BigNumberish,
      pctRelayFee: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relayCall(
      maxAcceptanceBudget: BigNumberish,
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)"(
      maxAcceptanceBudget: BigNumberish,
      relayRequest: RelayRequestStruct,
      signature: BytesLike,
      approvalData: BytesLike,
      externalGasLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfiguration(
      _config: RelayHubConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setConfiguration((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      _config: RelayHubConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    versionHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionHub()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workerCount(
      manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workerCount(address)"(
      manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workerToManager(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workerToManager(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
